---
import {
  CsrfManager,
  DEFAULT_CSRF_TOKEN_NAME,
} from "../../libs/repository/csrf";
import { csrfVerify, recaptchaVerify } from "../../libs/utils";
import { UserManager, UserManagerError } from "../../libs/repository/user";
import { Prisma } from "@prisma/client";

import CommonLayout from "../../layouts/CommonLayout.astro";
import { TOKEN_COOKIE_NAME } from "../../libs/const";

if (
  Astro.cookies.has(TOKEN_COOKIE_NAME) &&
  (await UserManager.validateSessionToken(
    Astro.cookies.get(TOKEN_COOKIE_NAME).value as string
  ))
) {
  return Astro.redirect("/");
}

let csrfToken: string = "";
let formInvalid = false;
let formErrorMessage = "";
const recaptchaMode = import.meta.env.VULPECULA_RECAPTCHA;
const recaptchaSiteKey = import.meta.env.VULPECULA_RECAPTCHA_SITE_KEY;

switch (Astro.request.method) {
  case "GET": {
    break;
  }
  case "POST": {
    const body = await Astro.request.formData();
    const cvr = await csrfVerify(body);
    if (cvr !== null) return cvr;

    if (!(body.has("email") && body.has("password"))) {
      formInvalid = true;
      formErrorMessage = "Malformed form";
      break;
    }

    const recaptchaReponse = await recaptchaVerify(body, Astro.clientAddress);
    if (!recaptchaReponse) {
      formInvalid = true;
      formErrorMessage = "Recaptcha challenge failed.";
      break;
    }

    try {
      await UserManager.createLocalUser({
        email: body.get("email") as string,
        password: body.get("password") as string,
      });
    } catch (e: any) {
      if (e instanceof UserManagerError) {
        formInvalid = true;
      } else if (e instanceof Prisma.PrismaClientKnownRequestError) {
        switch (e.code) {
          case "P2002": {
            formInvalid = true;
            formErrorMessage = "Email is already registered";
            break;
          }
          default: {
            throw e;
          }
        }
        break;
      } else {
        throw e;
      }
    }

    break;
  }
  default: {
    return new Response(null, {
      status: 405,
      statusText: "Method Not Allowed",
    });
  }
}

if (Astro.request.method === "GET" || formInvalid) {
  const cm = new CsrfManager();
  csrfToken = await cm.generateToken();
}
---

<CommonLayout title="Register">
  {
    Astro.request.method === "GET" || formInvalid ? (
      <>
        <h1>Register</h1>
        <>{formInvalid && <p>{formErrorMessage}</p>}</>
        <form method="post">
          <input
            type="email"
            name="email"
            placeholder="example@example.com"
            required
          />
          <input type="password" name="password" min="8" required />
          {recaptchaMode === "recaptcha" && (
            <div class="g-recaptcha" data-sitekey={recaptchaSiteKey} />
          )}
          {recaptchaMode === "turnstile" && (
            <div class="cf-turnstile" data-sitekey={recaptchaSiteKey} />
          )}
          <input
            type="hidden"
            name={DEFAULT_CSRF_TOKEN_NAME}
            value={csrfToken}
          />
          <input type="submit" />
          {recaptchaMode === "recaptcha" && (
            <script src="https://www.google.com/recaptcha/api.js" async defer />
          )}
          {recaptchaMode === "turnstile" && (
            <script
              src="https://challenges.cloudflare.com/turnstile/v0/api.js"
              async
              defer
            />
          )}
        </form>
      </>
    ) : (
      <p>Register OK</p>
    )
  }
</CommonLayout>
